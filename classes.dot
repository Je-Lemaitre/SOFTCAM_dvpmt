digraph "classes" {
rankdir=BT
charset="utf-8"
"softcam.domain.entities.assemblage.Assemblage" [color="black", fontcolor="black", label=<{Assemblage|came<br ALIGN="LEFT"/>coords_soupape : ndarray<br ALIGN="LEFT"/>inclinaison_soupape : float<br ALIGN="LEFT"/>jeu : float<br ALIGN="LEFT"/>levier : Optional[Levier]<br ALIGN="LEFT"/>ressort<br ALIGN="LEFT"/>sens_rotation_came : float<br ALIGN="LEFT"/>soupape<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/><I>to_dict</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.assemblage.AssemblageDirecte" [color="black", fontcolor="black", label=<{AssemblageDirecte|frottement_poussoircame : float<br ALIGN="LEFT"/>offset : float<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.assemblage.AssemblageLinguet" [color="black", fontcolor="black", label=<{AssemblageLinguet|angle_leviercame_init : float<br ALIGN="LEFT"/>angles_limites_patincame : tuple<br ALIGN="LEFT"/>angles_limites_patinsoupape : tuple<br ALIGN="LEFT"/>coords_came : ndarray<br ALIGN="LEFT"/>coords_levier : ndarray<br ALIGN="LEFT"/>frottement_patincame : float<br ALIGN="LEFT"/>frottement_patinsoupape : float<br ALIGN="LEFT"/>levier<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.loiscame.CalculEfficacite" [color="black", fontcolor="black", label=<{CalculEfficacite|calcloisrelles<br ALIGN="LEFT"/>laws<br ALIGN="LEFT"/>|calcul_aire_reelle(jeu)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.loiscame.CalculEfficaciteV2" [color="black", fontcolor="black", label=<{CalculEfficaciteV2|calcloisrelles<br ALIGN="LEFT"/>laws<br ALIGN="LEFT"/>|calcul_aire_reelle(jeu)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.services.calculsmecanique.CalculEfforts" [color="black", fontcolor="black", label=<{CalculEfforts|calccinematique<br ALIGN="LEFT"/>dr<br ALIGN="LEFT"/>fs<br ALIGN="LEFT"/>j3<br ALIGN="LEFT"/>k<br ALIGN="LEFT"/>lbd<br ALIGN="LEFT"/>lbd_ddoac<br ALIGN="LEFT"/>lbd_doac<br ALIGN="LEFT"/>m1<br ALIGN="LEFT"/>|<I>couple_arbre</I>(ac, regime_moteur)<br ALIGN="LEFT"/><I>effort_contact</I>(ac, regime_moteur, contact)<br ALIGN="LEFT"/><I>force_frottement</I>(ac, regime_moteur, contact)<br ALIGN="LEFT"/>force_ressort(ac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.services.calculsmecanique.CalculEffortsDirecte" [color="black", fontcolor="black", label=<{CalculEffortsDirecte|<br ALIGN="LEFT"/>|<I>couple_arbre</I>(ac, regime_moteur)<br ALIGN="LEFT"/><I>effort_contact</I>(ac, regime_moteur, contact)<br ALIGN="LEFT"/><I>force_frottement</I>(ac, regime_moteur, contact)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.services.calculsmecanique.CalculEffortsLevier" [color="black", fontcolor="black", label=<{CalculEffortsLevier|j2<br ALIGN="LEFT"/>mupc<br ALIGN="LEFT"/>mups<br ALIGN="LEFT"/>|couple_arbre(ac, regime_moteur)<br ALIGN="LEFT"/>effort_contact(ac, regime_moteur, contact)<br ALIGN="LEFT"/>force_frottement(ac, regime_moteur, contact)<br ALIGN="LEFT"/>z12(ac, regime_moteur)<br ALIGN="LEFT"/>z23(ac, regime_moteur)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.loiscame.CalculLoisReelles" [color="black", fontcolor="black", label=<{CalculLoisReelles|laws<br ALIGN="LEFT"/>|calcul_angles_attaque(jeu: float)<br ALIGN="LEFT"/>calcul_ouverture(jeu: float)<br ALIGN="LEFT"/>levee_reelle(angles, jeu)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.loiscame.CalculLoisReellesV2" [color="black", fontcolor="black", label=<{CalculLoisReellesV2|laws<br ALIGN="LEFT"/>|calcul_angles_attaque(jeu: float)<br ALIGN="LEFT"/>calcul_ouverture(jeu: float)<br ALIGN="LEFT"/>levee_reelle(angles, jeu)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.etude.CalculPositionContact" [color="black", fontcolor="black", label=<{CalculPositionContact|calccinematique<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.application.usecases.etude.CalculPressionHertz" [color="black", fontcolor="black", label=<{CalculPressionHertz|calcmecanique<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.application.usecases.came.CalculProfil" [color="black", fontcolor="black", label=<{CalculProfil|angles_evalpts<br ALIGN="LEFT"/>calcprofil<br ALIGN="LEFT"/>duree_levee<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.domain.services.calculsloiscame.CalculRaccord" [color="black", fontcolor="black", label=<{CalculRaccord|a_spl<br ALIGN="LEFT"/>af<br ALIGN="LEFT"/>ai<br ALIGN="LEFT"/>dac_raccord<br ALIGN="LEFT"/>j_spl<br ALIGN="LEFT"/>jf<br ALIGN="LEFT"/>ji<br ALIGN="LEFT"/>l_spl<br ALIGN="LEFT"/>v_spl<br ALIGN="LEFT"/>|bernstein_poly(i, n, t)<br ALIGN="LEFT"/>bezier_curve(points, nTimes)<br ALIGN="LEFT"/>compute_accel_spl()<br ALIGN="LEFT"/>compute_bezier_3rd_pts(x1, y1, j1, x2, y2, j2)<br ALIGN="LEFT"/>get_bezier_parameters(X, Y, degree)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.services.calculsloiscame.CalculRampe" [color="black", fontcolor="black", label=<{CalculRampe|a4<br ALIGN="LEFT"/>a5<br ALIGN="LEFT"/>a6<br ALIGN="LEFT"/>a7<br ALIGN="LEFT"/>dac_apos<br ALIGN="LEFT"/>dac_r<br ALIGN="LEFT"/>dac_vc<br ALIGN="LEFT"/>la<br ALIGN="LEFT"/>lr<br ALIGN="LEFT"/>vr<br ALIGN="LEFT"/>|a(ac)<br ALIGN="LEFT"/>bcs_pb()<br ALIGN="LEFT"/>compute_coeffs_accel()<br ALIGN="LEFT"/>compute_levee_accel()<br ALIGN="LEFT"/>from_dict(d)<br ALIGN="LEFT"/>j(ac)<br ALIGN="LEFT"/>l(ac)<br ALIGN="LEFT"/>matrix_pb()<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>v(ac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.came.CalculRayonCourbure" [color="black", fontcolor="black", label=<{CalculRayonCourbure|calcprofil<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.application.usecases.came.CalculRollerDisplacement" [color="black", fontcolor="black", label=<{CalculRollerDisplacement|calcprofil<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.application.usecases.etude.CalculVitesseGlissement" [color="black", fontcolor="black", label=<{CalculVitesseGlissement|calcmecanique<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.domain.services.calculscinematique.CalculsCinematique" [color="black", fontcolor="black", label=<{CalculsCinematique|lbd<br ALIGN="LEFT"/>lbd_ddoac<br ALIGN="LEFT"/>lbd_doac<br ALIGN="LEFT"/>rb<br ALIGN="LEFT"/>sensrot<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y1<br ALIGN="LEFT"/>z1<br ALIGN="LEFT"/>|<I>ci_c</I>(ac)<br ALIGN="LEFT"/>matrot(angle: np.ndarray)<br ALIGN="LEFT"/><I>position_contact</I>(ac, contact)<br ALIGN="LEFT"/><I>vitesse_glissement</I>(ac, contact)<br ALIGN="LEFT"/><I>y2</I>(ac)<br ALIGN="LEFT"/><I>z2</I>(ac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.services.calculscinematique.CalculsCinematiqueDirecte" [color="black", fontcolor="black", label=<{CalculsCinematiqueDirecte|<br ALIGN="LEFT"/>|<I>position_contact</I>(ac, contact)<br ALIGN="LEFT"/><I>vitesse_glissement</I>(ac, contact)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.services.calculscinematique.CalculsCinematiqueFromCame" [color="black", fontcolor="black", label=<{CalculsCinematiqueFromCame|beta0<br ALIGN="LEFT"/>gamma0<br ALIGN="LEFT"/>l_ling<br ALIGN="LEFT"/>lb<br ALIGN="LEFT"/>lc<br ALIGN="LEFT"/>norm_lb<br ALIGN="LEFT"/>norm_lc<br ALIGN="LEFT"/>oc<br ALIGN="LEFT"/>ol<br ALIGN="LEFT"/>rb<br ALIGN="LEFT"/>rho<br ALIGN="LEFT"/>rho_ddoeps<br ALIGN="LEFT"/>rho_doeps<br ALIGN="LEFT"/>rpc<br ALIGN="LEFT"/>rps<br ALIGN="LEFT"/>sensrot<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>yc<br ALIGN="LEFT"/>zc<br ALIGN="LEFT"/>|beta(ac, eps)<br ALIGN="LEFT"/>ci_soup_base3(ac, beta)<br ALIGN="LEFT"/>compute_beta0()<br ALIGN="LEFT"/>compute_lb()<br ALIGN="LEFT"/>cos_delta(eps)<br ALIGN="LEFT"/>delta(eps)<br ALIGN="LEFT"/>eq1_fermeture_geom(eps, ac)<br ALIGN="LEFT"/>eq2_fermeture_geom(eps, ac)<br ALIGN="LEFT"/>equation_fermeture_geom(eps, ac)<br ALIGN="LEFT"/>lbd(ac)<br ALIGN="LEFT"/>matrot(angle)<br ALIGN="LEFT"/>n23(eps)<br ALIGN="LEFT"/>oc_base3(ac)<br ALIGN="LEFT"/>sgn_delta(eps)<br ALIGN="LEFT"/>solve_fermeture_geom(acs)<br ALIGN="LEFT"/>t23(eps)<br ALIGN="LEFT"/>u(eps)<br ALIGN="LEFT"/>v(eps)<br ALIGN="LEFT"/>y1(ac)<br ALIGN="LEFT"/>y2(ac, beta)<br ALIGN="LEFT"/>z1(ac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.services.calculscinematique.CalculsCinematiqueLevier" [color="black", fontcolor="black", label=<{CalculsCinematiqueLevier|cb0<br ALIGN="LEFT"/>cl<br ALIGN="LEFT"/>gamma0<br ALIGN="LEFT"/>l_ling<br ALIGN="LEFT"/>ol<br ALIGN="LEFT"/>rpc<br ALIGN="LEFT"/>rps<br ALIGN="LEFT"/>|abs_angle_from_cos(cos_angle: float): float<br ALIGN="LEFT"/>angle_y23init_n23(ac: float): float<br ALIGN="LEFT"/>beta(ac: float): float<br ALIGN="LEFT"/>beta_ddoac(ac: float): float<br ALIGN="LEFT"/>beta_doac(ac: float): float<br ALIGN="LEFT"/>cb(ac: float): np.ndarray<br ALIGN="LEFT"/>cb_doac(ac: float)<br ALIGN="LEFT"/>ci_c(ac: float): np.ndarray<br ALIGN="LEFT"/>compute_cb0(): np.ndarray<br ALIGN="LEFT"/>cos_eta(ac: float): float<br ALIGN="LEFT"/>cos_y23init_n23(ac: float): float<br ALIGN="LEFT"/>di_soup(ac: float): float<br ALIGN="LEFT"/>eta(ac: float): float<br ALIGN="LEFT"/>eta_doac(ac: float): float<br ALIGN="LEFT"/>glissement_specifique(ac: float, contact: str): np.ndarray<br ALIGN="LEFT"/>lb(ac: float): np.ndarray<br ALIGN="LEFT"/>li_c(ac: float): np.ndarray<br ALIGN="LEFT"/>li_s(ac: float): np.ndarray<br ALIGN="LEFT"/>n23(ac: float): np.ndarray<br ALIGN="LEFT"/>phi(ac: float): float<br ALIGN="LEFT"/>phi_doac(ac: float, pas: float): float<br ALIGN="LEFT"/>position_contact(ac: float, contact: str): float<br ALIGN="LEFT"/>sgn_eta(ac: float): int<br ALIGN="LEFT"/>sgn_y23init_n23(ac: float): int<br ALIGN="LEFT"/>t23(ac: float): np.ndarray<br ALIGN="LEFT"/>v1_is(ac: float): float<br ALIGN="LEFT"/>v2_ic(ac: float): float<br ALIGN="LEFT"/>v2_is(ac: float): float<br ALIGN="LEFT"/>v3_ic(ac: float): float<br ALIGN="LEFT"/>vg12(ac: float): float<br ALIGN="LEFT"/>vg23(ac: float): float<br ALIGN="LEFT"/>vitesse_glissement(ac: float, contact: str): float<br ALIGN="LEFT"/>y2(ac: float): np.ndarray<br ALIGN="LEFT"/>y23(ac: float): np.ndarray<br ALIGN="LEFT"/>y3(ac: float): np.ndarray<br ALIGN="LEFT"/>z2(ac: float): np.ndarray<br ALIGN="LEFT"/>z23(ac: float): np.ndarray<br ALIGN="LEFT"/>z3(ac: float): np.ndarray<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.services.calculsmecanique.CalculsMecanique" [color="black", fontcolor="black", label=<{CalculsMecanique|calccinematique<br ALIGN="LEFT"/>calcefforts : NoneType<br ALIGN="LEFT"/>calcprofil<br ALIGN="LEFT"/>came<br ALIGN="LEFT"/>soupape<br ALIGN="LEFT"/>|coefficient_grippage(ac, regime_moteur, contact)<br ALIGN="LEFT"/><I>courbure_equivalente</I>(contact)<br ALIGN="LEFT"/><I>effort_lineique</I>(regime_mot, contact)<br ALIGN="LEFT"/><I>module_young_equivalent</I>(contact)<br ALIGN="LEFT"/>pression_hertz(ac, regime_moteur, contact)<br ALIGN="LEFT"/>vitesse_glissement(ac, regime_moteur, contact)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.services.calculsmecanique.CalculsMecaniqueDirecte" [color="black", fontcolor="black", label=<{CalculsMecaniqueDirecte|calcefforts<br ALIGN="LEFT"/>poussoir<br ALIGN="LEFT"/>|<I>courbure_equivalente</I>(ac, contact)<br ALIGN="LEFT"/><I>effort_lineique</I>(ac, regime_mot, contact)<br ALIGN="LEFT"/><I>module_young_equivalent</I>(contact)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.services.calculsmecanique.CalculsMecaniqueLevier" [color="black", fontcolor="black", label=<{CalculsMecaniqueLevier|calcefforts<br ALIGN="LEFT"/>patin_came<br ALIGN="LEFT"/>patin_soupape<br ALIGN="LEFT"/>|courbure_equivalente(ac, contact)<br ALIGN="LEFT"/>effort_lineique(ac, regime_mot, contact)<br ALIGN="LEFT"/>module_young_equivalent(contact)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.services.calculsprofilcame.CalculsProfilCame" [color="black", fontcolor="black", label=<{CalculsProfilCame|angle_polaire_itp : NoneType<br ALIGN="LEFT"/>ccin<br ALIGN="LEFT"/>lbd<br ALIGN="LEFT"/>lbd_doac<br ALIGN="LEFT"/>profil_polaire_itp : NoneType<br ALIGN="LEFT"/>sensrot<br ALIGN="LEFT"/>|<I>angle_polaire</I>(ac)<br ALIGN="LEFT"/>interpolate_angle_polaire(ac: np.ndarray): scitp.BSpline<br ALIGN="LEFT"/>interpolate_deplacement_roller(ac, rayon_roller)<br ALIGN="LEFT"/>interpolate_profil_polaire(ac: np.ndarray): scitp.BSpline<br ALIGN="LEFT"/><I>plan_tangent</I>(ac)<br ALIGN="LEFT"/><I>position_polaire_roller</I>(ac, rayon_roller)<br ALIGN="LEFT"/><I>profil_cartesien</I>(ac: np.ndarray): np.ndarray<br ALIGN="LEFT"/>profil_polaire(eps: np.ndarray): np.ndarray<br ALIGN="LEFT"/>rayon_courbure(eps: np.ndarray): np.ndarray<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.services.calculsprofilcame.CalculsProfilCameDirecte" [color="black", fontcolor="black", label=<{CalculsProfilCameDirecte|<br ALIGN="LEFT"/>|<I>angle_polaire</I>(ac)<br ALIGN="LEFT"/><I>plan_tangent</I>(ac)<br ALIGN="LEFT"/><I>position_polaire_roller</I>(ac, rayon_roller)<br ALIGN="LEFT"/><I>profil_cartesien</I>(ac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.services.calculsprofilcame.CalculsProfilCameLevier" [color="black", fontcolor="black", label=<{CalculsProfilCameLevier|angle_polaire_itp : BSpline<br ALIGN="LEFT"/>cl<br ALIGN="LEFT"/>gamma0<br ALIGN="LEFT"/>l_ling<br ALIGN="LEFT"/>oc<br ALIGN="LEFT"/>ol<br ALIGN="LEFT"/>profil_polaire_itp : BSpline<br ALIGN="LEFT"/>rb<br ALIGN="LEFT"/>rpc<br ALIGN="LEFT"/>rps<br ALIGN="LEFT"/>|angle_polaire(ac)<br ALIGN="LEFT"/>plan_tangent(ac)<br ALIGN="LEFT"/>position_polaire_roller(ac, rayon_roller)<br ALIGN="LEFT"/>profil_cartesien(ac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.camview.CamDialog" [color="black", fontcolor="black", label=<{CamDialog|cam<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>file_name<br ALIGN="LEFT"/>file_path<br ALIGN="LEFT"/>profile_name : NoneType<br ALIGN="LEFT"/>profile_path : NoneType<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/>open_filebrowser_dialog()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.came.Came" [color="black", fontcolor="black", label=<{Came|coefficient_poisson : float<br ALIGN="LEFT"/>inertie : float<br ALIGN="LEFT"/>largeur : float<br ALIGN="LEFT"/>module_young : float<br ALIGN="LEFT"/>profil : BSpline<br ALIGN="LEFT"/>rayon_base : float<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>valide_coefficient_poisson()<br ALIGN="LEFT"/>valide_largeur()<br ALIGN="LEFT"/>valide_module_young()<br ALIGN="LEFT"/>valide_rayon_base()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.etude.ChargeEtude" [color="black", fontcolor="black", label=<{ChargeEtude|repo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.application.usecases.came.ChargeProfil" [color="black", fontcolor="black", label=<{ChargeProfil|repo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.domain.entities.mecanique.Cinematique" [color="black", fontcolor="black", label=<{Cinematique|estvalide : bool<br ALIGN="LEFT"/>position_contact_camepatin : ndarray<br ALIGN="LEFT"/>position_contact_soupapepatin : ndarray<br ALIGN="LEFT"/>vitesse_balayage_camepatin : ndarray<br ALIGN="LEFT"/>vitesse_balayage_limite : float<br ALIGN="LEFT"/>vitesse_balayage_soupapepatin : ndarray<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.contactposview.ContactPosDialog" [color="black", fontcolor="black", label=<{ContactPosDialog|angles : NoneType<br ALIGN="LEFT"/>angles_contact_camepatin : NoneType<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>neglimit_camrockerarm_line : InfiniteLine<br ALIGN="LEFT"/>neglimit_camvalve_line : InfiniteLine<br ALIGN="LEFT"/>neglimit_valverockerarm_line : InfiniteLine<br ALIGN="LEFT"/>poslimit_camrockerarm_line : InfiniteLine<br ALIGN="LEFT"/>poslimit_camvalve_line : InfiniteLine<br ALIGN="LEFT"/>poslimit_valverockerarm_line : InfiniteLine<br ALIGN="LEFT"/>x_range : tuple<br ALIGN="LEFT"/>y_range : tuple<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/>compute_position()<br ALIGN="LEFT"/>reset_view()<br ALIGN="LEFT"/>show_camrockerarm()<br ALIGN="LEFT"/>show_camvalve()<br ALIGN="LEFT"/>show_valverockerarm()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.controllers.controller.Controller" [color="black", fontcolor="black", label=<{Controller|calccinematique : NoneType<br ALIGN="LEFT"/>calcefforts : NoneType<br ALIGN="LEFT"/>calcmecanique : NoneType<br ALIGN="LEFT"/>calcprofil : NoneType<br ALIGN="LEFT"/>current_laws : NoneType<br ALIGN="LEFT"/>current_study : NoneType<br ALIGN="LEFT"/>precision : float<br ALIGN="LEFT"/>repository<br ALIGN="LEFT"/>|<I>check_manufacturing</I>()<br ALIGN="LEFT"/><I>check_mechanics</I>()<br ALIGN="LEFT"/>compute_area(clearance: float)<br ALIGN="LEFT"/>compute_contactpos(contact)<br ALIGN="LEFT"/>compute_curvature()<br ALIGN="LEFT"/>compute_effective_laws(clearance: float)<br ALIGN="LEFT"/>compute_efficiency(clearance: float)<br ALIGN="LEFT"/>compute_hertz_pressure(speed: float, contact: str)<br ALIGN="LEFT"/>compute_opening(clearance: float)<br ALIGN="LEFT"/>compute_profile()<br ALIGN="LEFT"/>compute_roller_displacement(roller_radius: float)<br ALIGN="LEFT"/><I>compute_sliding_speed</I>(speed)<br ALIGN="LEFT"/>compute_slidingspeed(speed: float, contact: str)<br ALIGN="LEFT"/>create_study(name, assembly_type, step_time)<br ALIGN="LEFT"/>export_to_excel()<br ALIGN="LEFT"/>load_profile(profile_path)<br ALIGN="LEFT"/>load_study()<br ALIGN="LEFT"/>optimise_laws(symmetry: bool, valve_float_speed, openaccel_skl_raw, closeaccel_skl_raw, openspeed_skl_raw, closespeed_skl_raw, openlift_skl_raw, closelift_skl_raw, openjoin_angle_raw, closejoin_angle_raw)<br ALIGN="LEFT"/>save_study()<br ALIGN="LEFT"/>update_cam(rayon_base: float, largeur: float, module_young: float, coefficient_poisson: float, profil: BSpline)<br ALIGN="LEFT"/>update_curvature(cutting_radius, curvature)<br ALIGN="LEFT"/>update_laws()<br ALIGN="LEFT"/>update_options(studyname: str, stepangle: float, stepdisplay: float, steptime: float)<br ALIGN="LEFT"/>update_patin(loc: str, rayon_courbure: float, largeur: float, module_young: float, coefficient_poisson: float)<br ALIGN="LEFT"/>update_precision(new_precision)<br ALIGN="LEFT"/>update_profile_path(path)<br ALIGN="LEFT"/>update_rockerarm(masse: float, inertie: float, longueur: float)<br ALIGN="LEFT"/>update_rockerarmassembly(sens_rotation_came: int, coords_levier: list, coords_came: list, angle_leviercame_init: float, inclinaison_soupape: float)<br ALIGN="LEFT"/>update_roller(roller_radius, displacement)<br ALIGN="LEFT"/>update_spring(masse: float, raideur: float, precharge: float)<br ALIGN="LEFT"/>update_study_path(path)<br ALIGN="LEFT"/>update_tappet(masse: float, diametre: float, rayon_courbure: float, largeur_courbure: float, frottement_poussoir_guide: float)<br ALIGN="LEFT"/>update_valve(masse_soupape: float, masse_coupelle: float, diametre_soupape: float, poussoir: Poussoir, module_young: float, coefficient_poisson: float)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.interfaces.controller_interface.ControllerInterface" [color="black", fontcolor="black", label=<{ControllerInterface|calccinematique<br ALIGN="LEFT"/>calcmecanique<br ALIGN="LEFT"/>calcprofil<br ALIGN="LEFT"/>current_laws<br ALIGN="LEFT"/>current_study : Optional[Etude]<br ALIGN="LEFT"/>precision : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.domain.entities.fabrication.Courbure" [color="black", fontcolor="black", label=<{Courbure|diametre_meule_taillage : float<br ALIGN="LEFT"/>estvalide : bool<br ALIGN="LEFT"/>rayon_courbure : ndarray<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.loiscame.CreeDemiLois" [color="black", fontcolor="black", label=<{CreeDemiLois|asmb<br ALIGN="LEFT"/>ouverture : bool<br ALIGN="LEFT"/>|compute_raccord(duree_raccord: float, loisaccel: LoisPhaseAccel, loisdecel: LoisPhaseDecel): LoisPhaseRaccord<br ALIGN="LEFT"/>opt_func(accelmax_waff, opt_la: OptimiseLoisAccel, opt_ld: OptimiseLoisDecel, duree_raccord: float)<br ALIGN="LEFT"/>optimise(accelmax_init, regime_affolement_init, opt_la, opt_ld, duree_raccord)<br ALIGN="LEFT"/>traite_squelettes(accel_squelbrut, vitesse_squelbrut, levee_squelbrut, raccord_anglebrut, ouverture)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.etude.CreeEtude" [color="black", fontcolor="black", label=<{CreeEtude|init_repo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.application.usecases.loiscame.CreeLois" [color="black", fontcolor="black", label=<{CreeLois|asmb<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.application.usecases.etude.CreeUtilitairesCalcul" [color="black", fontcolor="black", label=<{CreeUtilitairesCalcul|study<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.infrastructure.views.curvatureview.CurvatureDialog" [color="black", fontcolor="black", label=<{CurvatureDialog|controller<br ALIGN="LEFT"/>curvedata : NoneType, list<br ALIGN="LEFT"/>maxradius_line : InfiniteLine<br ALIGN="LEFT"/>x_range : tuple<br ALIGN="LEFT"/>y_range : tuple<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/>compute_curvature()<br ALIGN="LEFT"/>move_line(str_pos)<br ALIGN="LEFT"/>reset_view()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.loiscame.DemiLois" [color="black", fontcolor="black", label=<{DemiLois|ac_fin_accel : float<br ALIGN="LEFT"/>ac_fin_rampe : float<br ALIGN="LEFT"/>ac_leveemax : float<br ALIGN="LEFT"/>ac_raccord : Optional[float]<br ALIGN="LEFT"/>accelmax_opt : Optional[float]<br ALIGN="LEFT"/>lois_accel : Optional[LoisPhaseAccel]<br ALIGN="LEFT"/>lois_decel : Optional[LoisPhaseDecel]<br ALIGN="LEFT"/>lois_raccord : Optional[LoisPhaseRaccord]<br ALIGN="LEFT"/>lois_rampe : Optional[LoisPhaseRampe]<br ALIGN="LEFT"/>regime_affolement_opt : Optional[float]<br ALIGN="LEFT"/>squelette_acceleration : ndarray<br ALIGN="LEFT"/>squelette_levee : ndarray<br ALIGN="LEFT"/>squelette_vitesse : ndarray<br ALIGN="LEFT"/>|a(ac)<br ALIGN="LEFT"/>from_dict(d)<br ALIGN="LEFT"/>j(ac)<br ALIGN="LEFT"/>l(ac)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>v(ac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.mecanique.Efforts" [color="black", fontcolor="black", label=<{Efforts|coefficient_grippage_camepatin : ndarray<br ALIGN="LEFT"/>coefficient_grippage_estvalide : bool<br ALIGN="LEFT"/>coefficient_grippage_soupapepatin : ndarray<br ALIGN="LEFT"/>phertz_camepatin : ndarray<br ALIGN="LEFT"/>phertz_estvalide : bool<br ALIGN="LEFT"/>phertz_soupapepatin : ndarray<br ALIGN="LEFT"/>pression_hertz_limite : float<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.etude.EnregistreEtude" [color="black", fontcolor="black", label=<{EnregistreEtude|repo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.domain.entities.etude.Etude" [color="black", fontcolor="black", label=<{Etude|assemblage<br ALIGN="LEFT"/>fabrication : Optional[Fabrication]<br ALIGN="LEFT"/>id : UUID<br ALIGN="LEFT"/>loiscame<br ALIGN="LEFT"/>mecanique : Optional[Mecanique]<br ALIGN="LEFT"/>nom : str<br ALIGN="LEFT"/>pas_angulaire : float<br ALIGN="LEFT"/>pas_temporel : float<br ALIGN="LEFT"/>type_assemblage : Optional[str]<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>valide_assemblage()<br ALIGN="LEFT"/>valide_pas_angulaire()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.repositories.excel_repository.ExcelRepository" [color="black", fontcolor="black", label=<{ExcelRepository|<br ALIGN="LEFT"/>|load_data()<br ALIGN="LEFT"/>load_profile(profile_path)<br ALIGN="LEFT"/>save_data(study: Etude)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.etude.ExportExcel" [color="black", fontcolor="black", label=<{ExportExcel|controller<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.domain.entities.fabrication.Fabrication" [color="black", fontcolor="black", label=<{Fabrication|courbure<br ALIGN="LEFT"/>roller<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.assemblyview.FlatTappetAssemblyDialog" [color="black", fontcolor="black", label=<{FlatTappetAssemblyDialog|assembly<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.infrastructure.views.forceview.ForceDialog" [color="black", fontcolor="black", label=<{ForceDialog|angle_evalpts<br ALIGN="LEFT"/>angle_range : tuple<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>force_camrockerarm : NoneType<br ALIGN="LEFT"/>force_camvalve : NoneType<br ALIGN="LEFT"/>force_valverockerarm : NoneType<br ALIGN="LEFT"/>maxpressure_camrockerarm_line : InfiniteLine<br ALIGN="LEFT"/>maxpressure_camvalve_line : InfiniteLine<br ALIGN="LEFT"/>maxpressure_valverockerarm_line : InfiniteLine<br ALIGN="LEFT"/>pressure_range : tuple<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/><I>compute_force</I>()<br ALIGN="LEFT"/><I>reset_view</I>()<br ALIGN="LEFT"/>show_camrockerarm()<br ALIGN="LEFT"/>show_camvalve()<br ALIGN="LEFT"/>show_torque()<br ALIGN="LEFT"/>show_valverockerarm()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.hertzview.HertzDialog" [color="black", fontcolor="black", label=<{HertzDialog|angle_evalpts : NoneType<br ALIGN="LEFT"/>angle_range : tuple<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>hertz_floatspeed_camepatin : NoneType<br ALIGN="LEFT"/>hertz_floatspeed_soupapepatin : NoneType<br ALIGN="LEFT"/>hertz_static_camepatin : NoneType<br ALIGN="LEFT"/>hertz_static_soupapepatin : NoneType<br ALIGN="LEFT"/>hertz_usespeed_camepatin : NoneType<br ALIGN="LEFT"/>hertz_usespeed_soupapepatin : NoneType<br ALIGN="LEFT"/>maxpressure_floatspeed_line : InfiniteLine<br ALIGN="LEFT"/>maxpressure_static_line : InfiniteLine<br ALIGN="LEFT"/>maxpressure_usespeed_line : InfiniteLine<br ALIGN="LEFT"/>pressure_range : tuple<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/>change_display_graph(text)<br ALIGN="LEFT"/>compute_pressure()<br ALIGN="LEFT"/>reset_view()<br ALIGN="LEFT"/>show_floatspeed()<br ALIGN="LEFT"/>show_static()<br ALIGN="LEFT"/>show_usespeed()<br ALIGN="LEFT"/>update_floatspeed_curves()<br ALIGN="LEFT"/>update_static_curves()<br ALIGN="LEFT"/>update_usespeed_curves()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.repositories.json_repository.JSONRepository" [color="black", fontcolor="black", label=<{JSONRepository|<br ALIGN="LEFT"/>|convert(x)<br ALIGN="LEFT"/>deconvert(x)<br ALIGN="LEFT"/>load_data()<br ALIGN="LEFT"/>load_profile(profile_path)<br ALIGN="LEFT"/>save_data(study: Etude)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.levier.Levier" [color="black", fontcolor="black", label=<{Levier|inertie : float<br ALIGN="LEFT"/>longueur : float<br ALIGN="LEFT"/>masse : float<br ALIGN="LEFT"/>patin_came<br ALIGN="LEFT"/>patin_soupape<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>valide_inertie()<br ALIGN="LEFT"/>valide_longueur()<br ALIGN="LEFT"/>valide_masse()<br ALIGN="LEFT"/>valide_patins()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.rockerarmview.LinguetDialog" [color="black", fontcolor="black", label=<{LinguetDialog|controller<br ALIGN="LEFT"/>rockerarm<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/>open_patincame_dialog()<br ALIGN="LEFT"/>open_patinsoup_dialog()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.loiscame.LoisCame" [color="black", fontcolor="black", label=<{LoisCame|dac_leveemax_fermeture : Optional[float]<br ALIGN="LEFT"/>dac_leveemax_ouverture : Optional[float]<br ALIGN="LEFT"/>demilois_fermeture : Optional[DemiLois]<br ALIGN="LEFT"/>demilois_ouverture : Optional[DemiLois]<br ALIGN="LEFT"/>symetrie : bool<br ALIGN="LEFT"/>|a(ac)<br ALIGN="LEFT"/>from_dict(d)<br ALIGN="LEFT"/>j(ac)<br ALIGN="LEFT"/>l(ac)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>v(ac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.lawsview.LoisDialog" [color="black", fontcolor="black", label=<{LoisDialog|accel : NoneType<br ALIGN="LEFT"/>accel_range : tuple<br ALIGN="LEFT"/>angle_range : tuple<br ALIGN="LEFT"/>angles : NoneType<br ALIGN="LEFT"/>closeaccel_skeleton<br ALIGN="LEFT"/>closejoin_line : InfiniteLine<br ALIGN="LEFT"/>closelift_skeleton<br ALIGN="LEFT"/>closespeed_skeleton<br ALIGN="LEFT"/>closing<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>effective_accel : NoneType<br ALIGN="LEFT"/>effective_angles : NoneType<br ALIGN="LEFT"/>effective_lift : NoneType<br ALIGN="LEFT"/>effective_speed : NoneType<br ALIGN="LEFT"/>laws<br ALIGN="LEFT"/>lift : NoneType<br ALIGN="LEFT"/>lift_range : tuple<br ALIGN="LEFT"/>openaccel_skeleton<br ALIGN="LEFT"/>opening<br ALIGN="LEFT"/>openjoin_line : InfiniteLine<br ALIGN="LEFT"/>openlift_skeleton<br ALIGN="LEFT"/>openspeed_skeleton<br ALIGN="LEFT"/>speed : NoneType<br ALIGN="LEFT"/>speed_range : tuple<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/>init_accel()<br ALIGN="LEFT"/>init_lift()<br ALIGN="LEFT"/>init_speed()<br ALIGN="LEFT"/>modify_closeaccel(plot, points)<br ALIGN="LEFT"/>modify_closelift(plot, points)<br ALIGN="LEFT"/>modify_closespeed(plot, points)<br ALIGN="LEFT"/>modify_joinline(line)<br ALIGN="LEFT"/>modify_openaccel(plot, points)<br ALIGN="LEFT"/>modify_openlift(plot, points)<br ALIGN="LEFT"/>modify_openspeed(plot, points)<br ALIGN="LEFT"/>optimise_laws()<br ALIGN="LEFT"/>plot_optimised_curves()<br ALIGN="LEFT"/>plot_skeleton()<br ALIGN="LEFT"/>plot_skeleton_curves()<br ALIGN="LEFT"/>plot_skeleton_scatters()<br ALIGN="LEFT"/>reset_view()<br ALIGN="LEFT"/>show_accel()<br ALIGN="LEFT"/>show_lift()<br ALIGN="LEFT"/>show_speed()<br ALIGN="LEFT"/>update_performances(clearance)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.loiscame.LoisPhaseAccel" [color="black", fontcolor="black", label=<{LoisPhaseAccel|a_spl : BSpline<br ALIGN="LEFT"/>duree_accel : float<br ALIGN="LEFT"/>j_spl : BSpline<br ALIGN="LEFT"/>l_spl : BSpline<br ALIGN="LEFT"/>levee_rampe : float<br ALIGN="LEFT"/>v_spl : BSpline<br ALIGN="LEFT"/>vitesse_rampe : float<br ALIGN="LEFT"/>|a(ac)<br ALIGN="LEFT"/>from_dict(d: dict)<br ALIGN="LEFT"/>j(ac)<br ALIGN="LEFT"/>l(ac)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>v(ac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.loiscame.LoisPhaseDecel" [color="black", fontcolor="black", label=<{LoisPhaseDecel|a_spl : BSpline<br ALIGN="LEFT"/>duree_decel : float<br ALIGN="LEFT"/>j_spl : BSpline<br ALIGN="LEFT"/>l_spl : BSpline<br ALIGN="LEFT"/>leveemax : float<br ALIGN="LEFT"/>v_spl : BSpline<br ALIGN="LEFT"/>|a(ac)<br ALIGN="LEFT"/>from_dict(d)<br ALIGN="LEFT"/>j(ac)<br ALIGN="LEFT"/>l(ac)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>v(ac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.loiscame.LoisPhaseDecelV2" [color="black", fontcolor="black", label=<{LoisPhaseDecelV2|a_spl : BSpline<br ALIGN="LEFT"/>duree_decel : float<br ALIGN="LEFT"/>j_spl : BSpline<br ALIGN="LEFT"/>l_init : float<br ALIGN="LEFT"/>l_spl : BSpline<br ALIGN="LEFT"/>v_init : float<br ALIGN="LEFT"/>v_spl : BSpline<br ALIGN="LEFT"/>|a(ac)<br ALIGN="LEFT"/>from_dict(d)<br ALIGN="LEFT"/>j(ac)<br ALIGN="LEFT"/>l(ac)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>v(ac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.loiscame.LoisPhaseRaccord" [color="black", fontcolor="black", label=<{LoisPhaseRaccord|a_spl : BSpline<br ALIGN="LEFT"/>duree_raccord : float<br ALIGN="LEFT"/>j_spl : BSpline<br ALIGN="LEFT"/>l_spl : BSpline<br ALIGN="LEFT"/>levee_init : float<br ALIGN="LEFT"/>v_spl : BSpline<br ALIGN="LEFT"/>vitesse_init : float<br ALIGN="LEFT"/>|a(ac)<br ALIGN="LEFT"/>from_dict(d)<br ALIGN="LEFT"/>j(ac)<br ALIGN="LEFT"/>l(ac)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>v(ac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.loiscame.LoisPhaseRampe" [color="black", fontcolor="black", label=<{LoisPhaseRampe|a_rampe : Callable[[np.ndarray], np.ndarray]<br ALIGN="LEFT"/>duree_rampe : float<br ALIGN="LEFT"/>j_rampe : Callable[[np.ndarray], np.ndarray]<br ALIGN="LEFT"/>l_rampe : Callable[[np.ndarray], np.ndarray]<br ALIGN="LEFT"/>v_rampe : Callable[[np.ndarray], np.ndarray]<br ALIGN="LEFT"/>|a(ac)<br ALIGN="LEFT"/>from_dict(d)<br ALIGN="LEFT"/>j(ac)<br ALIGN="LEFT"/>l(ac)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>v(ac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.lubricationview.LubricationDialog" [color="black", fontcolor="black", label=<{LubricationDialog|angle_evalpts<br ALIGN="LEFT"/>angle_range : tuple<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>lubrication_floatspeed : NoneType<br ALIGN="LEFT"/>lubrication_static : NoneType<br ALIGN="LEFT"/>lubrication_usespeed : NoneType<br ALIGN="LEFT"/>minthickness_floatspeed_line : InfiniteLine<br ALIGN="LEFT"/>minthickness_static_line : InfiniteLine<br ALIGN="LEFT"/>minthickness_usespeed_line : InfiniteLine<br ALIGN="LEFT"/>pressure_range : tuple<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/><I>compute_thickness</I>()<br ALIGN="LEFT"/><I>reset_view</I>()<br ALIGN="LEFT"/>show_camrockerarm()<br ALIGN="LEFT"/>show_camvalve()<br ALIGN="LEFT"/>show_valverockerarm()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.mecanique.Lubrification" [color="black", fontcolor="black", label=<{Lubrification|epaisseur_film_huile_camepatin : ndarray<br ALIGN="LEFT"/>epaisseur_film_huile_soupapepatin : ndarray<br ALIGN="LEFT"/>estvalide : bool<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.mainview.MainView" [color="black", fontcolor="black", label=<{MainView|assembly_type : str<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>soft_path<br ALIGN="LEFT"/>step_time : float<br ALIGN="LEFT"/>study_name : str<br ALIGN="LEFT"/>|create_study()<br ALIGN="LEFT"/><I>export_study</I>()<br ALIGN="LEFT"/><I>mechanical_verification</I>()<br ALIGN="LEFT"/>open_asmb_dialog()<br ALIGN="LEFT"/>open_contactpos_dialog()<br ALIGN="LEFT"/>open_curvature_dialog()<br ALIGN="LEFT"/><I>open_documentation</I>()<br ALIGN="LEFT"/>open_force_dialog()<br ALIGN="LEFT"/>open_hertz_dialog()<br ALIGN="LEFT"/>open_laws_widget()<br ALIGN="LEFT"/>open_lubrication_dialog()<br ALIGN="LEFT"/>open_pv_dialog()<br ALIGN="LEFT"/>open_roller_dialog()<br ALIGN="LEFT"/>open_slidingspeed_dialog()<br ALIGN="LEFT"/>open_study()<br ALIGN="LEFT"/>open_visu_dialog()<br ALIGN="LEFT"/>save_study()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.mecanique.Mecanique" [color="black", fontcolor="black", label=<{Mecanique|cinematique<br ALIGN="LEFT"/>efforts<br ALIGN="LEFT"/>lubrification<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.assemblage.MetAJourAssemblage" [color="black", fontcolor="black", label=<{MetAJourAssemblage|assemblage<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.application.usecases.came.MetAJourCame" [color="black", fontcolor="black", label=<{MetAJourCame|came<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.application.usecases.levier.MetAJourLevier" [color="black", fontcolor="black", label=<{MetAJourLevier|controller<br ALIGN="LEFT"/>levier<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.application.usecases.levier.MetAJourPatinCame" [color="black", fontcolor="black", label=<{MetAJourPatinCame|controller<br ALIGN="LEFT"/>patincame<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.application.usecases.levier.MetAJourPatinSoupape" [color="black", fontcolor="black", label=<{MetAJourPatinSoupape|controller<br ALIGN="LEFT"/>patinsoupape<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.application.usecases.soupape.MetAJourPoussoir" [color="black", fontcolor="black", label=<{MetAJourPoussoir|controller<br ALIGN="LEFT"/>poussoir<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.application.usecases.came.MetAJourProfil" [color="black", fontcolor="black", label=<{MetAJourProfil|came<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.application.usecases.ressort.MetAJourRessort" [color="black", fontcolor="black", label=<{MetAJourRessort|controller<br ALIGN="LEFT"/>ressort<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.application.usecases.soupape.MetAJourSoupape" [color="black", fontcolor="black", label=<{MetAJourSoupape|controller<br ALIGN="LEFT"/>soupape<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.infrastructure.views.mainview.NewStudyDialog" [color="black", fontcolor="black", label=<{NewStudyDialog|<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.loiscame.OptimiseLoisAccel" [color="black", fontcolor="black", label=<{OptimiseLoisAccel|accel_squel<br ALIGN="LEFT"/>duree_accel<br ALIGN="LEFT"/>levee_rampe<br ALIGN="LEFT"/>vitesse_rampe<br ALIGN="LEFT"/>|compute_a_spl(ctrlpts, poids, degree, delta): scitp.BSpline<br ALIGN="LEFT"/>compute_ctrlpts(accelmax: float)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.loiscame.OptimiseLoisDecel" [color="black", fontcolor="black", label=<{OptimiseLoisDecel|ac_evalpts<br ALIGN="LEFT"/>betamax<br ALIGN="LEFT"/>dr<br ALIGN="LEFT"/>duree_decel<br ALIGN="LEFT"/>j2<br ALIGN="LEFT"/>k<br ALIGN="LEFT"/>l_ling<br ALIGN="LEFT"/>leveemax<br ALIGN="LEFT"/>m1<br ALIGN="LEFT"/>mu_ps<br ALIGN="LEFT"/>r_ps<br ALIGN="LEFT"/>z_l<br ALIGN="LEFT"/>|compute_a_spl(acs, decels, degree)<br ALIGN="LEFT"/>compute_decel(regime_affolement)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.loiscame.OptimiseLoisDecelV2" [color="black", fontcolor="black", label=<{OptimiseLoisDecelV2|betamax<br ALIGN="LEFT"/>dr<br ALIGN="LEFT"/>j2<br ALIGN="LEFT"/>k<br ALIGN="LEFT"/>l_ling<br ALIGN="LEFT"/>leveemax<br ALIGN="LEFT"/>m1<br ALIGN="LEFT"/>mu_ps<br ALIGN="LEFT"/>pas_itg<br ALIGN="LEFT"/>r_ps<br ALIGN="LEFT"/>z_l<br ALIGN="LEFT"/>|compute_a_spl(acs, decels, degree)<br ALIGN="LEFT"/>compute_decel(ac_evalpts, beta_init, beta_dot_init, regime_affolement)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.usecases.loiscame.OptimiseLoisRampe" [color="black", fontcolor="black", label=<{OptimiseLoisRampe|duree_rampe<br ALIGN="LEFT"/>duree_vitesse_constante<br ALIGN="LEFT"/>levee_rampe<br ALIGN="LEFT"/>vitesse_rampe<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.infrastructure.views.optionsview.OptionDialog" [color="black", fontcolor="black", label=<{OptionDialog|controller<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.pvview.PVDialog" [color="black", fontcolor="black", label=<{PVDialog|angle_evalpts<br ALIGN="LEFT"/>angle_range : tuple<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>maxpv_camrockerarm_line : InfiniteLine<br ALIGN="LEFT"/>maxpv_camvalve_line : InfiniteLine<br ALIGN="LEFT"/>maxpv_valverockerarm_line : InfiniteLine<br ALIGN="LEFT"/>pressure_range : tuple<br ALIGN="LEFT"/>pv_camrockerarm : NoneType<br ALIGN="LEFT"/>pv_camvalve : NoneType<br ALIGN="LEFT"/>pv_valverockerarm : NoneType<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/><I>compute_pv</I>()<br ALIGN="LEFT"/><I>reset_view</I>()<br ALIGN="LEFT"/>show_camrockerarm()<br ALIGN="LEFT"/>show_camvalve()<br ALIGN="LEFT"/>show_valverockerarm()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.levier.Patin" [color="black", fontcolor="black", label=<{Patin|coefficient_poisson : float<br ALIGN="LEFT"/>largeur : float<br ALIGN="LEFT"/>module_young : float<br ALIGN="LEFT"/>rayon_courbure : float<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>valide_coefficient_poisson()<br ALIGN="LEFT"/>valide_largeur()<br ALIGN="LEFT"/>valide_module_young()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.rockerarmview.PatinDialog" [color="black", fontcolor="black", label=<{PatinDialog|controller<br ALIGN="LEFT"/>loc : str<br ALIGN="LEFT"/>patin<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.lawsview.PointDialog" [color="black", fontcolor="black", label=<{PointDialog|point<br ALIGN="LEFT"/>weight : int<br ALIGN="LEFT"/>|get_coordinates()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.soupape.Poussoir" [color="black", fontcolor="black", label=<{Poussoir|diametre : float<br ALIGN="LEFT"/>frottement_poussoir_guide : float<br ALIGN="LEFT"/>largeur_courbure : float<br ALIGN="LEFT"/>masse : float<br ALIGN="LEFT"/>rayon_courbure : float<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>valide_diametre()<br ALIGN="LEFT"/>valide_largeur_courbure()<br ALIGN="LEFT"/>valide_masse()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.application.interfaces.repository_interface.RepositoryInterface" [color="black", fontcolor="black", label=<{RepositoryInterface|profile_path : NoneType<br ALIGN="LEFT"/>study_path<br ALIGN="LEFT"/>|<I>load_data</I>(): Etude<br ALIGN="LEFT"/><I>load_profile</I>(profile_path: str): dict<br ALIGN="LEFT"/><I>save_data</I>(study: Etude): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.ressort.Ressort" [color="black", fontcolor="black", label=<{Ressort|masse : float<br ALIGN="LEFT"/>precharge : float<br ALIGN="LEFT"/>raideur : float<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>validate_masse()<br ALIGN="LEFT"/>validate_raideur()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.springview.RessortDialog" [color="black", fontcolor="black", label=<{RessortDialog|controller<br ALIGN="LEFT"/>spring<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.assemblyview.RockerArmAssemblyDialog" [color="black", fontcolor="black", label=<{RockerArmAssemblyDialog|assembly<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/>open_cam_dialog()<br ALIGN="LEFT"/>open_rockerarm_dialog()<br ALIGN="LEFT"/>open_spring_dialog()<br ALIGN="LEFT"/>open_valve_dialog()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.fabrication.Roller" [color="black", fontcolor="black", label=<{Roller|deplacement_roller : ndarray<br ALIGN="LEFT"/>rayon_roller : float<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.rollerview.RollerDialog" [color="black", fontcolor="black", label=<{RollerDialog|controller<br ALIGN="LEFT"/>curvedata : NoneType, list<br ALIGN="LEFT"/>x_range : tuple<br ALIGN="LEFT"/>y_range : tuple<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/>compute_displacement()<br ALIGN="LEFT"/>reset_view()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.assemblyview.RollerTappetAssemblyDialog" [color="black", fontcolor="black", label=<{RollerTappetAssemblyDialog|assembly<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"softcam.infrastructure.views.slidingspeedview.SlidingSpeedDialog" [color="black", fontcolor="black", label=<{SlidingSpeedDialog|angles : NoneType<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>maxspeed_floatspeed_line : InfiniteLine<br ALIGN="LEFT"/>maxspeed_usespeed_line : InfiniteLine<br ALIGN="LEFT"/>minspeed_floatspeed_line : InfiniteLine<br ALIGN="LEFT"/>minspeed_usespeed_line : InfiniteLine<br ALIGN="LEFT"/>slidingspeed_floatspeed_camepatin : NoneType<br ALIGN="LEFT"/>slidingspeed_floatspeed_soupapepatin : NoneType<br ALIGN="LEFT"/>slidingspeed_floatspeed_valvepatin<br ALIGN="LEFT"/>slidingspeed_usespeed_camepatin : NoneType<br ALIGN="LEFT"/>slidingspeed_usespeed_soupapepatin : NoneType<br ALIGN="LEFT"/>slidingspeed_usespeed_valvepatin<br ALIGN="LEFT"/>x_range : tuple<br ALIGN="LEFT"/>y_range : tuple<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/>change_display_graph(text)<br ALIGN="LEFT"/>compute_speed()<br ALIGN="LEFT"/>reset_view()<br ALIGN="LEFT"/>show_floatspeed()<br ALIGN="LEFT"/>show_usespeed()<br ALIGN="LEFT"/>update_floatspeed_curves()<br ALIGN="LEFT"/>update_usespeed_curves()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.soupape.Soupape" [color="black", fontcolor="black", label=<{Soupape|coefficient_poisson : float<br ALIGN="LEFT"/>diametre_soupape : float<br ALIGN="LEFT"/>masse_coupelle : float<br ALIGN="LEFT"/>masse_soupape : float<br ALIGN="LEFT"/>module_young : float<br ALIGN="LEFT"/>poussoir : Optional[Poussoir]<br ALIGN="LEFT"/>|from_dict(d)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>valide_coefficient_poisson()<br ALIGN="LEFT"/>valide_diametre_soupape()<br ALIGN="LEFT"/>valide_masses()<br ALIGN="LEFT"/>valide_module_young()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.valveview.SoupapeDialog" [color="black", fontcolor="black", label=<{SoupapeDialog|controller<br ALIGN="LEFT"/>valve<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.infrastructure.views.visuview.VisuDialog" [color="black", fontcolor="black", label=<{VisuDialog|angle_range : tuple<br ALIGN="LEFT"/>basecircle_profile<br ALIGN="LEFT"/>cartesian_profile : NoneType<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>curvature : NoneType, list<br ALIGN="LEFT"/>curvature_range : tuple<br ALIGN="LEFT"/>kinematics_range : tuple<br ALIGN="LEFT"/>plot_angles<br ALIGN="LEFT"/>profile_range : tuple<br ALIGN="LEFT"/>|display_graph()<br ALIGN="LEFT"/>reset_view()<br ALIGN="LEFT"/>show_curvature()<br ALIGN="LEFT"/>show_kinematics()<br ALIGN="LEFT"/>show_profile()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"softcam.domain.entities.assemblage.AssemblageDirecte" -> "softcam.domain.entities.assemblage.Assemblage" [arrowhead="empty", arrowtail="none"];
"softcam.domain.entities.assemblage.AssemblageLinguet" -> "softcam.domain.entities.assemblage.Assemblage" [arrowhead="empty", arrowtail="none"];
"softcam.domain.services.calculscinematique.CalculsCinematiqueDirecte" -> "softcam.domain.services.calculscinematique.CalculsCinematique" [arrowhead="empty", arrowtail="none"];
"softcam.domain.services.calculscinematique.CalculsCinematiqueLevier" -> "softcam.domain.services.calculscinematique.CalculsCinematique" [arrowhead="empty", arrowtail="none"];
"softcam.domain.services.calculsmecanique.CalculEffortsDirecte" -> "softcam.domain.services.calculsmecanique.CalculEfforts" [arrowhead="empty", arrowtail="none"];
"softcam.domain.services.calculsmecanique.CalculEffortsLevier" -> "softcam.domain.services.calculsmecanique.CalculEfforts" [arrowhead="empty", arrowtail="none"];
"softcam.domain.services.calculsmecanique.CalculsMecaniqueDirecte" -> "softcam.domain.services.calculsmecanique.CalculsMecanique" [arrowhead="empty", arrowtail="none"];
"softcam.domain.services.calculsmecanique.CalculsMecaniqueLevier" -> "softcam.domain.services.calculsmecanique.CalculsMecanique" [arrowhead="empty", arrowtail="none"];
"softcam.domain.services.calculsprofilcame.CalculsProfilCameDirecte" -> "softcam.domain.services.calculsprofilcame.CalculsProfilCame" [arrowhead="empty", arrowtail="none"];
"softcam.domain.services.calculsprofilcame.CalculsProfilCameLevier" -> "softcam.domain.services.calculsprofilcame.CalculsProfilCame" [arrowhead="empty", arrowtail="none"];
"softcam.application.usecases.loiscame.CalculLoisReelles" -> "softcam.application.usecases.loiscame.CalculEfficacite" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="calcloisrelles", style="solid"];
"softcam.domain.entities.fabrication.Courbure" -> "softcam.domain.entities.fabrication.Fabrication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="courbure", style="solid"];
"softcam.domain.entities.fabrication.Roller" -> "softcam.domain.entities.fabrication.Fabrication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="roller", style="solid"];
"softcam.domain.entities.levier.Patin" -> "softcam.domain.entities.levier.Levier" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="patin_came", style="solid"];
"softcam.domain.entities.levier.Patin" -> "softcam.domain.entities.levier.Levier" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="patin_soupape", style="solid"];
"softcam.domain.entities.mecanique.Cinematique" -> "softcam.domain.entities.mecanique.Mecanique" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cinematique", style="solid"];
"softcam.domain.entities.mecanique.Efforts" -> "softcam.domain.entities.mecanique.Mecanique" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="efforts", style="solid"];
"softcam.domain.entities.mecanique.Lubrification" -> "softcam.domain.entities.mecanique.Mecanique" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lubrification", style="solid"];
"softcam.domain.services.calculsmecanique.CalculEffortsDirecte" -> "softcam.domain.services.calculsmecanique.CalculsMecaniqueDirecte" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="calcefforts", style="solid"];
"softcam.domain.services.calculsmecanique.CalculEffortsLevier" -> "softcam.domain.services.calculsmecanique.CalculsMecaniqueLevier" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="calcefforts", style="solid"];
"softcam.application.usecases.loiscame.CalculLoisReellesV2" -> "softcam.application.usecases.loiscame.CalculEfficaciteV2" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="calcloisrelles", style="solid"];
}
